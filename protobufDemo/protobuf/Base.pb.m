// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Base.pb.h"

@implementation BaseRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BaseRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ReqHead ()
@property (retain) NSString* uid;
@property (retain) NSString* skey;
@property (retain) NSString* command;
@property (retain) NSData* body;
@property int32_t cTs;
@property int32_t platform;
@end

@implementation ReqHead

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value {
  hasUid_ = !!value;
}
@synthesize uid;
- (BOOL) hasSkey {
  return !!hasSkey_;
}
- (void) setHasSkey:(BOOL) value {
  hasSkey_ = !!value;
}
@synthesize skey;
- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value {
  hasBody_ = !!value;
}
@synthesize body;
- (BOOL) hasCTs {
  return !!hasCTs_;
}
- (void) setHasCTs:(BOOL) value {
  hasCTs_ = !!value;
}
@synthesize cTs;
- (BOOL) hasPlatform {
  return !!hasPlatform_;
}
- (void) setHasPlatform:(BOOL) value {
  hasPlatform_ = !!value;
}
@synthesize platform;
- (void) dealloc {
  self.uid = nil;
  self.skey = nil;
  self.command = nil;
  self.body = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uid = @"";
    self.skey = @"";
    self.command = @"";
    self.body = [NSData data];
    self.cTs = 0;
    self.platform = 0;
  }
  return self;
}
static ReqHead* defaultReqHeadInstance = nil;
+ (void) initialize {
  if (self == [ReqHead class]) {
    defaultReqHeadInstance = [[ReqHead alloc] init];
  }
}
+ (ReqHead*) defaultInstance {
  return defaultReqHeadInstance;
}
- (ReqHead*) defaultInstance {
  return defaultReqHeadInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeString:1 value:self.uid];
  }
  if (self.hasSkey) {
    [output writeString:2 value:self.skey];
  }
  if (self.hasCommand) {
    [output writeString:3 value:self.command];
  }
  if (self.hasBody) {
    [output writeData:4 value:self.body];
  }
  if (self.hasCTs) {
    [output writeUInt32:5 value:self.cTs];
  }
  if (self.hasPlatform) {
    [output writeUInt32:6 value:self.platform];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUid) {
    size += computeStringSize(1, self.uid);
  }
  if (self.hasSkey) {
    size += computeStringSize(2, self.skey);
  }
  if (self.hasCommand) {
    size += computeStringSize(3, self.command);
  }
  if (self.hasBody) {
    size += computeDataSize(4, self.body);
  }
  if (self.hasCTs) {
    size += computeUInt32Size(5, self.cTs);
  }
  if (self.hasPlatform) {
    size += computeUInt32Size(6, self.platform);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ReqHead*) parseFromData:(NSData*) data {
  return (ReqHead*)[[[ReqHead builder] mergeFromData:data] build];
}
+ (ReqHead*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReqHead*)[[[ReqHead builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReqHead*) parseFromInputStream:(NSInputStream*) input {
  return (ReqHead*)[[[ReqHead builder] mergeFromInputStream:input] build];
}
+ (ReqHead*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (ReqHead*)[[[ReqHead builder] mergeDelimitedFromInputStream:input] build];
}
+ (ReqHead*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReqHead*)[[[ReqHead builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReqHead*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReqHead*)[[[ReqHead builder] mergeFromCodedInputStream:input] build];
}
+ (ReqHead*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReqHead*)[[[ReqHead builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReqHead_Builder*) builder {
  return [[[ReqHead_Builder alloc] init] autorelease];
}
+ (ReqHead_Builder*) builderWithPrototype:(ReqHead*) prototype {
  return [[ReqHead builder] mergeFrom:prototype];
}
- (ReqHead_Builder*) builder {
  return [ReqHead builder];
}
@end

@interface ReqHead_Builder()
@property (retain) ReqHead* result;
@end

@implementation ReqHead_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ReqHead alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ReqHead_Builder*) clear {
  self.result = [[[ReqHead alloc] init] autorelease];
  return self;
}
- (ReqHead_Builder*) clone {
  return [ReqHead builderWithPrototype:result];
}
- (ReqHead*) defaultInstance {
  return [ReqHead defaultInstance];
}
- (ReqHead*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReqHead*) buildPartial {
  ReqHead* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ReqHead_Builder*) mergeFrom:(ReqHead*) other {
  if (other == [ReqHead defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasSkey) {
    [self setSkey:other.skey];
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.hasCTs) {
    [self setCTs:other.cTs];
  }
  if (other.hasPlatform) {
    [self setPlatform:other.platform];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReqHead_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReqHead_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUid:[input readString]];
        break;
      }
      case 18: {
        [self setSkey:[input readString]];
        break;
      }
      case 26: {
        [self setCommand:[input readString]];
        break;
      }
      case 34: {
        [self setBody:[input readData]];
        break;
      }
      case 40: {
        [self setCTs:[input readUInt32]];
        break;
      }
      case 48: {
        [self setPlatform:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (NSString*) uid {
  return result.uid;
}
- (ReqHead_Builder*) setUid:(NSString*) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (ReqHead_Builder*) clearUid {
  result.hasUid = NO;
  result.uid = @"";
  return self;
}
- (BOOL) hasSkey {
  return result.hasSkey;
}
- (NSString*) skey {
  return result.skey;
}
- (ReqHead_Builder*) setSkey:(NSString*) value {
  result.hasSkey = YES;
  result.skey = value;
  return self;
}
- (ReqHead_Builder*) clearSkey {
  result.hasSkey = NO;
  result.skey = @"";
  return self;
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (NSString*) command {
  return result.command;
}
- (ReqHead_Builder*) setCommand:(NSString*) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (ReqHead_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = @"";
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (NSData*) body {
  return result.body;
}
- (ReqHead_Builder*) setBody:(NSData*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (ReqHead_Builder*) clearBody {
  result.hasBody = NO;
  result.body = [NSData data];
  return self;
}
- (BOOL) hasCTs {
  return result.hasCTs;
}
- (int32_t) cTs {
  return result.cTs;
}
- (ReqHead_Builder*) setCTs:(int32_t) value {
  result.hasCTs = YES;
  result.cTs = value;
  return self;
}
- (ReqHead_Builder*) clearCTs {
  result.hasCTs = NO;
  result.cTs = 0;
  return self;
}
- (BOOL) hasPlatform {
  return result.hasPlatform;
}
- (int32_t) platform {
  return result.platform;
}
- (ReqHead_Builder*) setPlatform:(int32_t) value {
  result.hasPlatform = YES;
  result.platform = value;
  return self;
}
- (ReqHead_Builder*) clearPlatform {
  result.hasPlatform = NO;
  result.platform = 0;
  return self;
}
@end

@interface RspHead ()
@property (retain) NSString* skey;
@property (retain) NSString* sTs;
@property (retain) NSString* command;
@property int32_t retcode;
@property (retain) NSData* content;
@end

@implementation RspHead

- (BOOL) hasSkey {
  return !!hasSkey_;
}
- (void) setHasSkey:(BOOL) value {
  hasSkey_ = !!value;
}
@synthesize skey;
- (BOOL) hasSTs {
  return !!hasSTs_;
}
- (void) setHasSTs:(BOOL) value {
  hasSTs_ = !!value;
}
@synthesize sTs;
- (BOOL) hasCommand {
  return !!hasCommand_;
}
- (void) setHasCommand:(BOOL) value {
  hasCommand_ = !!value;
}
@synthesize command;
- (BOOL) hasRetcode {
  return !!hasRetcode_;
}
- (void) setHasRetcode:(BOOL) value {
  hasRetcode_ = !!value;
}
@synthesize retcode;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (void) dealloc {
  self.skey = nil;
  self.sTs = nil;
  self.command = nil;
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.skey = @"";
    self.sTs = @"";
    self.command = @"";
    self.retcode = 0;
    self.content = [NSData data];
  }
  return self;
}
static RspHead* defaultRspHeadInstance = nil;
+ (void) initialize {
  if (self == [RspHead class]) {
    defaultRspHeadInstance = [[RspHead alloc] init];
  }
}
+ (RspHead*) defaultInstance {
  return defaultRspHeadInstance;
}
- (RspHead*) defaultInstance {
  return defaultRspHeadInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkey) {
    [output writeString:1 value:self.skey];
  }
  if (self.hasSTs) {
    [output writeString:2 value:self.sTs];
  }
  if (self.hasCommand) {
    [output writeString:3 value:self.command];
  }
  if (self.hasRetcode) {
    [output writeSInt32:4 value:self.retcode];
  }
  if (self.hasContent) {
    [output writeData:5 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSkey) {
    size += computeStringSize(1, self.skey);
  }
  if (self.hasSTs) {
    size += computeStringSize(2, self.sTs);
  }
  if (self.hasCommand) {
    size += computeStringSize(3, self.command);
  }
  if (self.hasRetcode) {
    size += computeSInt32Size(4, self.retcode);
  }
  if (self.hasContent) {
    size += computeDataSize(5, self.content);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RspHead*) parseFromData:(NSData*) data {
  return (RspHead*)[[[RspHead builder] mergeFromData:data] build];
}
+ (RspHead*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RspHead*)[[[RspHead builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RspHead*) parseFromInputStream:(NSInputStream*) input {
  return (RspHead*)[[[RspHead builder] mergeFromInputStream:input] build];
}
+ (RspHead*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (RspHead*)[[[RspHead builder] mergeDelimitedFromInputStream:input] build];
}
+ (RspHead*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RspHead*)[[[RspHead builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RspHead*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RspHead*)[[[RspHead builder] mergeFromCodedInputStream:input] build];
}
+ (RspHead*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RspHead*)[[[RspHead builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RspHead_Builder*) builder {
  return [[[RspHead_Builder alloc] init] autorelease];
}
+ (RspHead_Builder*) builderWithPrototype:(RspHead*) prototype {
  return [[RspHead builder] mergeFrom:prototype];
}
- (RspHead_Builder*) builder {
  return [RspHead builder];
}
@end

@interface RspHead_Builder()
@property (retain) RspHead* result;
@end

@implementation RspHead_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RspHead alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RspHead_Builder*) clear {
  self.result = [[[RspHead alloc] init] autorelease];
  return self;
}
- (RspHead_Builder*) clone {
  return [RspHead builderWithPrototype:result];
}
- (RspHead*) defaultInstance {
  return [RspHead defaultInstance];
}
- (RspHead*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RspHead*) buildPartial {
  RspHead* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RspHead_Builder*) mergeFrom:(RspHead*) other {
  if (other == [RspHead defaultInstance]) {
    return self;
  }
  if (other.hasSkey) {
    [self setSkey:other.skey];
  }
  if (other.hasSTs) {
    [self setSTs:other.sTs];
  }
  if (other.hasCommand) {
    [self setCommand:other.command];
  }
  if (other.hasRetcode) {
    [self setRetcode:other.retcode];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RspHead_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RspHead_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSkey:[input readString]];
        break;
      }
      case 18: {
        [self setSTs:[input readString]];
        break;
      }
      case 26: {
        [self setCommand:[input readString]];
        break;
      }
      case 32: {
        [self setRetcode:[input readSInt32]];
        break;
      }
      case 42: {
        [self setContent:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasSkey {
  return result.hasSkey;
}
- (NSString*) skey {
  return result.skey;
}
- (RspHead_Builder*) setSkey:(NSString*) value {
  result.hasSkey = YES;
  result.skey = value;
  return self;
}
- (RspHead_Builder*) clearSkey {
  result.hasSkey = NO;
  result.skey = @"";
  return self;
}
- (BOOL) hasSTs {
  return result.hasSTs;
}
- (NSString*) sTs {
  return result.sTs;
}
- (RspHead_Builder*) setSTs:(NSString*) value {
  result.hasSTs = YES;
  result.sTs = value;
  return self;
}
- (RspHead_Builder*) clearSTs {
  result.hasSTs = NO;
  result.sTs = @"";
  return self;
}
- (BOOL) hasCommand {
  return result.hasCommand;
}
- (NSString*) command {
  return result.command;
}
- (RspHead_Builder*) setCommand:(NSString*) value {
  result.hasCommand = YES;
  result.command = value;
  return self;
}
- (RspHead_Builder*) clearCommand {
  result.hasCommand = NO;
  result.command = @"";
  return self;
}
- (BOOL) hasRetcode {
  return result.hasRetcode;
}
- (int32_t) retcode {
  return result.retcode;
}
- (RspHead_Builder*) setRetcode:(int32_t) value {
  result.hasRetcode = YES;
  result.retcode = value;
  return self;
}
- (RspHead_Builder*) clearRetcode {
  result.hasRetcode = NO;
  result.retcode = 0;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSData*) content {
  return result.content;
}
- (RspHead_Builder*) setContent:(NSData*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (RspHead_Builder*) clearContent {
  result.hasContent = NO;
  result.content = [NSData data];
  return self;
}
@end

@interface UserBaseInfo ()
@property int32_t avg;
@property int32_t sex;
@property (retain) NSString* nick;
@property (retain) NSString* iconUrl;
@property (retain) NSString* loginskey;
@property (retain) NSString* logintime;
@property (retain) NSString* email;
@property (retain) NSString* mobileno;
@property (retain) NSString* openid;
@property int32_t from;
@property (retain) NSString* prov;
@property (retain) NSString* city;
@property (retain) NSString* zone;
@property (retain) NSString* ishow;
@end

@implementation UserBaseInfo

- (BOOL) hasAvg {
  return !!hasAvg_;
}
- (void) setHasAvg:(BOOL) value {
  hasAvg_ = !!value;
}
@synthesize avg;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) value {
  hasSex_ = !!value;
}
@synthesize sex;
- (BOOL) hasNick {
  return !!hasNick_;
}
- (void) setHasNick:(BOOL) value {
  hasNick_ = !!value;
}
@synthesize nick;
- (BOOL) hasIconUrl {
  return !!hasIconUrl_;
}
- (void) setHasIconUrl:(BOOL) value {
  hasIconUrl_ = !!value;
}
@synthesize iconUrl;
- (BOOL) hasLoginskey {
  return !!hasLoginskey_;
}
- (void) setHasLoginskey:(BOOL) value {
  hasLoginskey_ = !!value;
}
@synthesize loginskey;
- (BOOL) hasLogintime {
  return !!hasLogintime_;
}
- (void) setHasLogintime:(BOOL) value {
  hasLogintime_ = !!value;
}
@synthesize logintime;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasMobileno {
  return !!hasMobileno_;
}
- (void) setHasMobileno:(BOOL) value {
  hasMobileno_ = !!value;
}
@synthesize mobileno;
- (BOOL) hasOpenid {
  return !!hasOpenid_;
}
- (void) setHasOpenid:(BOOL) value {
  hasOpenid_ = !!value;
}
@synthesize openid;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasProv {
  return !!hasProv_;
}
- (void) setHasProv:(BOOL) value {
  hasProv_ = !!value;
}
@synthesize prov;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) value {
  hasCity_ = !!value;
}
@synthesize city;
- (BOOL) hasZone {
  return !!hasZone_;
}
- (void) setHasZone:(BOOL) value {
  hasZone_ = !!value;
}
@synthesize zone;
- (BOOL) hasIshow {
  return !!hasIshow_;
}
- (void) setHasIshow:(BOOL) value {
  hasIshow_ = !!value;
}
@synthesize ishow;
- (void) dealloc {
  self.nick = nil;
  self.iconUrl = nil;
  self.loginskey = nil;
  self.logintime = nil;
  self.email = nil;
  self.mobileno = nil;
  self.openid = nil;
  self.prov = nil;
  self.city = nil;
  self.zone = nil;
  self.ishow = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.avg = 0;
    self.sex = 0;
    self.nick = @"";
    self.iconUrl = @"";
    self.loginskey = @"";
    self.logintime = @"";
    self.email = @"";
    self.mobileno = @"";
    self.openid = @"";
    self.from = 0;
    self.prov = @"";
    self.city = @"";
    self.zone = @"";
    self.ishow = @"";
  }
  return self;
}
static UserBaseInfo* defaultUserBaseInfoInstance = nil;
+ (void) initialize {
  if (self == [UserBaseInfo class]) {
    defaultUserBaseInfoInstance = [[UserBaseInfo alloc] init];
  }
}
+ (UserBaseInfo*) defaultInstance {
  return defaultUserBaseInfoInstance;
}
- (UserBaseInfo*) defaultInstance {
  return defaultUserBaseInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAvg) {
    [output writeSInt32:1 value:self.avg];
  }
  if (self.hasSex) {
    [output writeSInt32:2 value:self.sex];
  }
  if (self.hasNick) {
    [output writeString:3 value:self.nick];
  }
  if (self.hasIconUrl) {
    [output writeString:4 value:self.iconUrl];
  }
  if (self.hasLoginskey) {
    [output writeString:5 value:self.loginskey];
  }
  if (self.hasLogintime) {
    [output writeString:6 value:self.logintime];
  }
  if (self.hasEmail) {
    [output writeString:7 value:self.email];
  }
  if (self.hasMobileno) {
    [output writeString:8 value:self.mobileno];
  }
  if (self.hasOpenid) {
    [output writeString:9 value:self.openid];
  }
  if (self.hasFrom) {
    [output writeSInt32:10 value:self.from];
  }
  if (self.hasProv) {
    [output writeString:11 value:self.prov];
  }
  if (self.hasCity) {
    [output writeString:12 value:self.city];
  }
  if (self.hasZone) {
    [output writeString:13 value:self.zone];
  }
  if (self.hasIshow) {
    [output writeString:14 value:self.ishow];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAvg) {
    size += computeSInt32Size(1, self.avg);
  }
  if (self.hasSex) {
    size += computeSInt32Size(2, self.sex);
  }
  if (self.hasNick) {
    size += computeStringSize(3, self.nick);
  }
  if (self.hasIconUrl) {
    size += computeStringSize(4, self.iconUrl);
  }
  if (self.hasLoginskey) {
    size += computeStringSize(5, self.loginskey);
  }
  if (self.hasLogintime) {
    size += computeStringSize(6, self.logintime);
  }
  if (self.hasEmail) {
    size += computeStringSize(7, self.email);
  }
  if (self.hasMobileno) {
    size += computeStringSize(8, self.mobileno);
  }
  if (self.hasOpenid) {
    size += computeStringSize(9, self.openid);
  }
  if (self.hasFrom) {
    size += computeSInt32Size(10, self.from);
  }
  if (self.hasProv) {
    size += computeStringSize(11, self.prov);
  }
  if (self.hasCity) {
    size += computeStringSize(12, self.city);
  }
  if (self.hasZone) {
    size += computeStringSize(13, self.zone);
  }
  if (self.hasIshow) {
    size += computeStringSize(14, self.ishow);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserBaseInfo*) parseFromData:(NSData*) data {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromData:data] build];
}
+ (UserBaseInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserBaseInfo*) parseFromInputStream:(NSInputStream*) input {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromInputStream:input] build];
}
+ (UserBaseInfo*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeDelimitedFromInputStream:input] build];
}
+ (UserBaseInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBaseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromCodedInputStream:input] build];
}
+ (UserBaseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBaseInfo*)[[[UserBaseInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBaseInfo_Builder*) builder {
  return [[[UserBaseInfo_Builder alloc] init] autorelease];
}
+ (UserBaseInfo_Builder*) builderWithPrototype:(UserBaseInfo*) prototype {
  return [[UserBaseInfo builder] mergeFrom:prototype];
}
- (UserBaseInfo_Builder*) builder {
  return [UserBaseInfo builder];
}
@end

@interface UserBaseInfo_Builder()
@property (retain) UserBaseInfo* result;
@end

@implementation UserBaseInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserBaseInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserBaseInfo_Builder*) clear {
  self.result = [[[UserBaseInfo alloc] init] autorelease];
  return self;
}
- (UserBaseInfo_Builder*) clone {
  return [UserBaseInfo builderWithPrototype:result];
}
- (UserBaseInfo*) defaultInstance {
  return [UserBaseInfo defaultInstance];
}
- (UserBaseInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserBaseInfo*) buildPartial {
  UserBaseInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserBaseInfo_Builder*) mergeFrom:(UserBaseInfo*) other {
  if (other == [UserBaseInfo defaultInstance]) {
    return self;
  }
  if (other.hasAvg) {
    [self setAvg:other.avg];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasNick) {
    [self setNick:other.nick];
  }
  if (other.hasIconUrl) {
    [self setIconUrl:other.iconUrl];
  }
  if (other.hasLoginskey) {
    [self setLoginskey:other.loginskey];
  }
  if (other.hasLogintime) {
    [self setLogintime:other.logintime];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasMobileno) {
    [self setMobileno:other.mobileno];
  }
  if (other.hasOpenid) {
    [self setOpenid:other.openid];
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasProv) {
    [self setProv:other.prov];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasZone) {
    [self setZone:other.zone];
  }
  if (other.hasIshow) {
    [self setIshow:other.ishow];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserBaseInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserBaseInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAvg:[input readSInt32]];
        break;
      }
      case 16: {
        [self setSex:[input readSInt32]];
        break;
      }
      case 26: {
        [self setNick:[input readString]];
        break;
      }
      case 34: {
        [self setIconUrl:[input readString]];
        break;
      }
      case 42: {
        [self setLoginskey:[input readString]];
        break;
      }
      case 50: {
        [self setLogintime:[input readString]];
        break;
      }
      case 58: {
        [self setEmail:[input readString]];
        break;
      }
      case 66: {
        [self setMobileno:[input readString]];
        break;
      }
      case 74: {
        [self setOpenid:[input readString]];
        break;
      }
      case 80: {
        [self setFrom:[input readSInt32]];
        break;
      }
      case 90: {
        [self setProv:[input readString]];
        break;
      }
      case 98: {
        [self setCity:[input readString]];
        break;
      }
      case 106: {
        [self setZone:[input readString]];
        break;
      }
      case 114: {
        [self setIshow:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAvg {
  return result.hasAvg;
}
- (int32_t) avg {
  return result.avg;
}
- (UserBaseInfo_Builder*) setAvg:(int32_t) value {
  result.hasAvg = YES;
  result.avg = value;
  return self;
}
- (UserBaseInfo_Builder*) clearAvg {
  result.hasAvg = NO;
  result.avg = 0;
  return self;
}
- (BOOL) hasSex {
  return result.hasSex;
}
- (int32_t) sex {
  return result.sex;
}
- (UserBaseInfo_Builder*) setSex:(int32_t) value {
  result.hasSex = YES;
  result.sex = value;
  return self;
}
- (UserBaseInfo_Builder*) clearSex {
  result.hasSex = NO;
  result.sex = 0;
  return self;
}
- (BOOL) hasNick {
  return result.hasNick;
}
- (NSString*) nick {
  return result.nick;
}
- (UserBaseInfo_Builder*) setNick:(NSString*) value {
  result.hasNick = YES;
  result.nick = value;
  return self;
}
- (UserBaseInfo_Builder*) clearNick {
  result.hasNick = NO;
  result.nick = @"";
  return self;
}
- (BOOL) hasIconUrl {
  return result.hasIconUrl;
}
- (NSString*) iconUrl {
  return result.iconUrl;
}
- (UserBaseInfo_Builder*) setIconUrl:(NSString*) value {
  result.hasIconUrl = YES;
  result.iconUrl = value;
  return self;
}
- (UserBaseInfo_Builder*) clearIconUrl {
  result.hasIconUrl = NO;
  result.iconUrl = @"";
  return self;
}
- (BOOL) hasLoginskey {
  return result.hasLoginskey;
}
- (NSString*) loginskey {
  return result.loginskey;
}
- (UserBaseInfo_Builder*) setLoginskey:(NSString*) value {
  result.hasLoginskey = YES;
  result.loginskey = value;
  return self;
}
- (UserBaseInfo_Builder*) clearLoginskey {
  result.hasLoginskey = NO;
  result.loginskey = @"";
  return self;
}
- (BOOL) hasLogintime {
  return result.hasLogintime;
}
- (NSString*) logintime {
  return result.logintime;
}
- (UserBaseInfo_Builder*) setLogintime:(NSString*) value {
  result.hasLogintime = YES;
  result.logintime = value;
  return self;
}
- (UserBaseInfo_Builder*) clearLogintime {
  result.hasLogintime = NO;
  result.logintime = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (UserBaseInfo_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (UserBaseInfo_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasMobileno {
  return result.hasMobileno;
}
- (NSString*) mobileno {
  return result.mobileno;
}
- (UserBaseInfo_Builder*) setMobileno:(NSString*) value {
  result.hasMobileno = YES;
  result.mobileno = value;
  return self;
}
- (UserBaseInfo_Builder*) clearMobileno {
  result.hasMobileno = NO;
  result.mobileno = @"";
  return self;
}
- (BOOL) hasOpenid {
  return result.hasOpenid;
}
- (NSString*) openid {
  return result.openid;
}
- (UserBaseInfo_Builder*) setOpenid:(NSString*) value {
  result.hasOpenid = YES;
  result.openid = value;
  return self;
}
- (UserBaseInfo_Builder*) clearOpenid {
  result.hasOpenid = NO;
  result.openid = @"";
  return self;
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (int32_t) from {
  return result.from;
}
- (UserBaseInfo_Builder*) setFrom:(int32_t) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (UserBaseInfo_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = 0;
  return self;
}
- (BOOL) hasProv {
  return result.hasProv;
}
- (NSString*) prov {
  return result.prov;
}
- (UserBaseInfo_Builder*) setProv:(NSString*) value {
  result.hasProv = YES;
  result.prov = value;
  return self;
}
- (UserBaseInfo_Builder*) clearProv {
  result.hasProv = NO;
  result.prov = @"";
  return self;
}
- (BOOL) hasCity {
  return result.hasCity;
}
- (NSString*) city {
  return result.city;
}
- (UserBaseInfo_Builder*) setCity:(NSString*) value {
  result.hasCity = YES;
  result.city = value;
  return self;
}
- (UserBaseInfo_Builder*) clearCity {
  result.hasCity = NO;
  result.city = @"";
  return self;
}
- (BOOL) hasZone {
  return result.hasZone;
}
- (NSString*) zone {
  return result.zone;
}
- (UserBaseInfo_Builder*) setZone:(NSString*) value {
  result.hasZone = YES;
  result.zone = value;
  return self;
}
- (UserBaseInfo_Builder*) clearZone {
  result.hasZone = NO;
  result.zone = @"";
  return self;
}
- (BOOL) hasIshow {
  return result.hasIshow;
}
- (NSString*) ishow {
  return result.ishow;
}
- (UserBaseInfo_Builder*) setIshow:(NSString*) value {
  result.hasIshow = YES;
  result.ishow = value;
  return self;
}
- (UserBaseInfo_Builder*) clearIshow {
  result.hasIshow = NO;
  result.ishow = @"";
  return self;
}
@end

